// Code generated by MockGen. DO NOT EDIT.
// Source: server/internal/infra/s3/client.go
//
// Generated by this command:
//
//	mockgen -source=server/internal/infra/s3/client.go -destination=server/internal/mock/s3.go -package=mock Client
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBucketManager is a mock of BucketManager interface.
type MockBucketManager struct {
	ctrl     *gomock.Controller
	recorder *MockBucketManagerMockRecorder
	isgomock struct{}
}

// MockBucketManagerMockRecorder is the mock recorder for MockBucketManager.
type MockBucketManagerMockRecorder struct {
	mock *MockBucketManager
}

// NewMockBucketManager creates a new mock instance.
func NewMockBucketManager(ctrl *gomock.Controller) *MockBucketManager {
	mock := &MockBucketManager{ctrl: ctrl}
	mock.recorder = &MockBucketManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketManager) EXPECT() *MockBucketManagerMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockBucketManager) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockBucketManagerMockRecorder) BucketExists(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockBucketManager)(nil).BucketExists), ctx, bucketName)
}

// MakeBucket mocks base method.
func (m *MockBucketManager) MakeBucket(ctx context.Context, bucketName string, tags map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBucket", ctx, bucketName, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBucket indicates an expected call of MakeBucket.
func (mr *MockBucketManagerMockRecorder) MakeBucket(ctx, bucketName, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBucket", reflect.TypeOf((*MockBucketManager)(nil).MakeBucket), ctx, bucketName, tags)
}

// RemoveBucket mocks base method.
func (m *MockBucketManager) RemoveBucket(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBucket", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBucket indicates an expected call of RemoveBucket.
func (mr *MockBucketManagerMockRecorder) RemoveBucket(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBucket", reflect.TypeOf((*MockBucketManager)(nil).RemoveBucket), ctx, bucketName)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockClient) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockClientMockRecorder) BucketExists(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockClient)(nil).BucketExists), ctx, bucketName)
}

// GetPresignedURL mocks base method.
func (m *MockClient) GetPresignedURL(ctx context.Context) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURL", ctx)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURL indicates an expected call of GetPresignedURL.
func (mr *MockClientMockRecorder) GetPresignedURL(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURL", reflect.TypeOf((*MockClient)(nil).GetPresignedURL), ctx)
}

// MakeBucket mocks base method.
func (m *MockClient) MakeBucket(ctx context.Context, bucketName string, tags map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBucket", ctx, bucketName, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBucket indicates an expected call of MakeBucket.
func (mr *MockClientMockRecorder) MakeBucket(ctx, bucketName, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBucket", reflect.TypeOf((*MockClient)(nil).MakeBucket), ctx, bucketName, tags)
}

// RemoveBucket mocks base method.
func (m *MockClient) RemoveBucket(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBucket", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBucket indicates an expected call of RemoveBucket.
func (mr *MockClientMockRecorder) RemoveBucket(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBucket", reflect.TypeOf((*MockClient)(nil).RemoveBucket), ctx, bucketName)
}
