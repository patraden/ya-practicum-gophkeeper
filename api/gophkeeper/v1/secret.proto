syntax = "proto3";

package gophkeeper.v1;

import "buf/validate/validate.proto";
import "gophkeeper/v1/common.proto";

option go_package = "github.com/patraden/ya-practicum-gophkeeper/api/gophkeeper/v1;proto";

service SecretService {
  rpc UpdateInit(UpdateInitRequest) returns (UpdateInitResponse);
  rpc UpdateCommit(UpdateCommitRequest) returns (UpdateCommitResponse);
}

message UpdateInitRequest {
  string user_id           = 1  [(buf.validate.field).string.uuid = true];       // Required: ID of the user performing the operation
  string secret_id         = 2  [(buf.validate.field).string.uuid = true];       // Required: Target secret UUID (client-generated)
  string parent_version    = 3;                                                  // Optional: Expected current version; empty for new secret
  string version           = 4  [(buf.validate.field).string.uuid = true];       // Required: New version UUID (client-generated)
  string secret_name       = 5  [(buf.validate.field).string = {min_len: 1, max_len: 64}]; // Required: Secret name (for new secrets only)
  int64  size              = 6  [(buf.validate.field).int64.gt = 0];             // Required: Size of encrypted content
  bytes  hash              = 7  [(buf.validate.field).bytes.min_len = 1];       // Required: Hash of encrypted content
  bytes  encrypted_dek     = 8  [(buf.validate.field).bytes.min_len = 1];       // Required: Encrypted Data Encryption Key (DEK)
  string client_info       = 9  [(buf.validate.field).string.min_len = 1];       // Required: Info about client/device (agent, version, etc.)
  int64  expires_in_seconds= 10 [(buf.validate.field).int64.gt = 0];             // Required: TTL for upload request in seconds
  string meta_json         = 11;                                                 // Optional: JSON string with user-defined metadata
  string request_type      = 12;                                                 // Optional: Request type (default: "put")
}

message UpdateInitResponse {
  string user_id      = 1 [(buf.validate.field).string.uuid = true]; // Echoed back user ID
  string secret_id    = 2 [(buf.validate.field).string.uuid = true]; // Secret ID for which the request was created
  string version      = 3 [(buf.validate.field).string.uuid = true]; // Version UUID being uploaded
  string s3_url       = 4 [(buf.validate.field).string.uri = true];  // Presigned URL or base bucket path for upload
  int64  token        = 5 [(buf.validate.field).int64.gt = 0];       // Token to be used in UpdateCommit for validation
  TemporaryCredentials credentials = 6;                              // STS credentials to be used with S3
}


message UpdateCommitRequest {
}

message UpdateCommitResponse {
}