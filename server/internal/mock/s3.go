// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/s3/operations.go
//
// Generated by this command:
//
//	mockgen -source=pkg/s3/operations.go -destination=server/internal/mock/s3.go -package=mock ServerOperator
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	url "net/url"
	reflect "reflect"
	time "time"

	s3 "github.com/patraden/ya-practicum-gophkeeper/pkg/s3"
	gomock "go.uber.org/mock/gomock"
)

// MockBucketManager is a mock of BucketManager interface.
type MockBucketManager struct {
	ctrl     *gomock.Controller
	recorder *MockBucketManagerMockRecorder
	isgomock struct{}
}

// MockBucketManagerMockRecorder is the mock recorder for MockBucketManager.
type MockBucketManagerMockRecorder struct {
	mock *MockBucketManager
}

// NewMockBucketManager creates a new mock instance.
func NewMockBucketManager(ctrl *gomock.Controller) *MockBucketManager {
	mock := &MockBucketManager{ctrl: ctrl}
	mock.recorder = &MockBucketManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketManager) EXPECT() *MockBucketManagerMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockBucketManager) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockBucketManagerMockRecorder) BucketExists(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockBucketManager)(nil).BucketExists), ctx, bucketName)
}

// MakeBucket mocks base method.
func (m *MockBucketManager) MakeBucket(ctx context.Context, bucketName string, tags map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBucket", ctx, bucketName, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBucket indicates an expected call of MakeBucket.
func (mr *MockBucketManagerMockRecorder) MakeBucket(ctx, bucketName, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBucket", reflect.TypeOf((*MockBucketManager)(nil).MakeBucket), ctx, bucketName, tags)
}

// RemoveBucket mocks base method.
func (m *MockBucketManager) RemoveBucket(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBucket", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBucket indicates an expected call of RemoveBucket.
func (mr *MockBucketManagerMockRecorder) RemoveBucket(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBucket", reflect.TypeOf((*MockBucketManager)(nil).RemoveBucket), ctx, bucketName)
}

// SetBucketNotification mocks base method.
func (m *MockBucketManager) SetBucketNotification(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketNotification", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBucketNotification indicates an expected call of SetBucketNotification.
func (mr *MockBucketManagerMockRecorder) SetBucketNotification(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketNotification", reflect.TypeOf((*MockBucketManager)(nil).SetBucketNotification), ctx, bucketName)
}

// MockURLManager is a mock of URLManager interface.
type MockURLManager struct {
	ctrl     *gomock.Controller
	recorder *MockURLManagerMockRecorder
	isgomock struct{}
}

// MockURLManagerMockRecorder is the mock recorder for MockURLManager.
type MockURLManagerMockRecorder struct {
	mock *MockURLManager
}

// NewMockURLManager creates a new mock instance.
func NewMockURLManager(ctrl *gomock.Controller) *MockURLManager {
	mock := &MockURLManager{ctrl: ctrl}
	mock.recorder = &MockURLManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLManager) EXPECT() *MockURLManagerMockRecorder {
	return m.recorder
}

// GeneratePresignedPutURL mocks base method.
func (m *MockURLManager) GeneratePresignedPutURL(ctx context.Context, bucketName, objectKey string, expiry time.Duration) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedPutURL", ctx, bucketName, objectKey, expiry)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedPutURL indicates an expected call of GeneratePresignedPutURL.
func (mr *MockURLManagerMockRecorder) GeneratePresignedPutURL(ctx, bucketName, objectKey, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedPutURL", reflect.TypeOf((*MockURLManager)(nil).GeneratePresignedPutURL), ctx, bucketName, objectKey, expiry)
}

// MockSecurityManager is a mock of SecurityManager interface.
type MockSecurityManager struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityManagerMockRecorder
	isgomock struct{}
}

// MockSecurityManagerMockRecorder is the mock recorder for MockSecurityManager.
type MockSecurityManagerMockRecorder struct {
	mock *MockSecurityManager
}

// NewMockSecurityManager creates a new mock instance.
func NewMockSecurityManager(ctrl *gomock.Controller) *MockSecurityManager {
	mock := &MockSecurityManager{ctrl: ctrl}
	mock.recorder = &MockSecurityManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityManager) EXPECT() *MockSecurityManagerMockRecorder {
	return m.recorder
}

// AddCannedPolicy mocks base method.
func (m *MockSecurityManager) AddCannedPolicy(ctx context.Context, name string, policyJSON []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCannedPolicy", ctx, name, policyJSON)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCannedPolicy indicates an expected call of AddCannedPolicy.
func (mr *MockSecurityManagerMockRecorder) AddCannedPolicy(ctx, name, policyJSON any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCannedPolicy", reflect.TypeOf((*MockSecurityManager)(nil).AddCannedPolicy), ctx, name, policyJSON)
}

// AssumeRole mocks base method.
func (m *MockSecurityManager) AssumeRole(ctx context.Context, identityToken string, durationSeconds int) (*s3.TemporaryCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeRole", ctx, identityToken, durationSeconds)
	ret0, _ := ret[0].(*s3.TemporaryCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockSecurityManagerMockRecorder) AssumeRole(ctx, identityToken, durationSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockSecurityManager)(nil).AssumeRole), ctx, identityToken, durationSeconds)
}

// MockServerOperator is a mock of ServerOperator interface.
type MockServerOperator struct {
	ctrl     *gomock.Controller
	recorder *MockServerOperatorMockRecorder
	isgomock struct{}
}

// MockServerOperatorMockRecorder is the mock recorder for MockServerOperator.
type MockServerOperatorMockRecorder struct {
	mock *MockServerOperator
}

// NewMockServerOperator creates a new mock instance.
func NewMockServerOperator(ctrl *gomock.Controller) *MockServerOperator {
	mock := &MockServerOperator{ctrl: ctrl}
	mock.recorder = &MockServerOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerOperator) EXPECT() *MockServerOperatorMockRecorder {
	return m.recorder
}

// AddCannedPolicy mocks base method.
func (m *MockServerOperator) AddCannedPolicy(ctx context.Context, name string, policyJSON []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCannedPolicy", ctx, name, policyJSON)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCannedPolicy indicates an expected call of AddCannedPolicy.
func (mr *MockServerOperatorMockRecorder) AddCannedPolicy(ctx, name, policyJSON any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCannedPolicy", reflect.TypeOf((*MockServerOperator)(nil).AddCannedPolicy), ctx, name, policyJSON)
}

// AssumeRole mocks base method.
func (m *MockServerOperator) AssumeRole(ctx context.Context, identityToken string, durationSeconds int) (*s3.TemporaryCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeRole", ctx, identityToken, durationSeconds)
	ret0, _ := ret[0].(*s3.TemporaryCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockServerOperatorMockRecorder) AssumeRole(ctx, identityToken, durationSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockServerOperator)(nil).AssumeRole), ctx, identityToken, durationSeconds)
}

// BucketExists mocks base method.
func (m *MockServerOperator) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockServerOperatorMockRecorder) BucketExists(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockServerOperator)(nil).BucketExists), ctx, bucketName)
}

// GeneratePresignedPutURL mocks base method.
func (m *MockServerOperator) GeneratePresignedPutURL(ctx context.Context, bucketName, objectKey string, expiry time.Duration) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedPutURL", ctx, bucketName, objectKey, expiry)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedPutURL indicates an expected call of GeneratePresignedPutURL.
func (mr *MockServerOperatorMockRecorder) GeneratePresignedPutURL(ctx, bucketName, objectKey, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedPutURL", reflect.TypeOf((*MockServerOperator)(nil).GeneratePresignedPutURL), ctx, bucketName, objectKey, expiry)
}

// MakeBucket mocks base method.
func (m *MockServerOperator) MakeBucket(ctx context.Context, bucketName string, tags map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBucket", ctx, bucketName, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBucket indicates an expected call of MakeBucket.
func (mr *MockServerOperatorMockRecorder) MakeBucket(ctx, bucketName, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBucket", reflect.TypeOf((*MockServerOperator)(nil).MakeBucket), ctx, bucketName, tags)
}

// RemoveBucket mocks base method.
func (m *MockServerOperator) RemoveBucket(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBucket", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBucket indicates an expected call of RemoveBucket.
func (mr *MockServerOperatorMockRecorder) RemoveBucket(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBucket", reflect.TypeOf((*MockServerOperator)(nil).RemoveBucket), ctx, bucketName)
}

// SetBucketNotification mocks base method.
func (m *MockServerOperator) SetBucketNotification(ctx context.Context, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketNotification", ctx, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBucketNotification indicates an expected call of SetBucketNotification.
func (mr *MockServerOperatorMockRecorder) SetBucketNotification(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketNotification", reflect.TypeOf((*MockServerOperator)(nil).SetBucketNotification), ctx, bucketName)
}

// MockClientOperator is a mock of ClientOperator interface.
type MockClientOperator struct {
	ctrl     *gomock.Controller
	recorder *MockClientOperatorMockRecorder
	isgomock struct{}
}

// MockClientOperatorMockRecorder is the mock recorder for MockClientOperator.
type MockClientOperatorMockRecorder struct {
	mock *MockClientOperator
}

// NewMockClientOperator creates a new mock instance.
func NewMockClientOperator(ctrl *gomock.Controller) *MockClientOperator {
	mock := &MockClientOperator{ctrl: ctrl}
	mock.recorder = &MockClientOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientOperator) EXPECT() *MockClientOperatorMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockClientOperator) GetObject(ctx context.Context, bucketName, objectName, filePath string, opts s3.GetObjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, bucketName, objectName, filePath, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetObject indicates an expected call of GetObject.
func (mr *MockClientOperatorMockRecorder) GetObject(ctx, bucketName, objectName, filePath, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockClientOperator)(nil).GetObject), ctx, bucketName, objectName, filePath, opts)
}

// PutObject mocks base method.
func (m *MockClientOperator) PutObject(ctx context.Context, bucketName, objectName, filePath string, opts s3.PutObjectOptions) (s3.UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, bucketName, objectName, filePath, opts)
	ret0, _ := ret[0].(s3.UploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockClientOperatorMockRecorder) PutObject(ctx, bucketName, objectName, filePath, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockClientOperator)(nil).PutObject), ctx, bucketName, objectName, filePath, opts)
}
