// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package secret

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66711093DecodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret(in *jlexer.Lexer, out *MetaData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MetaData)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 string
			v1 = string(in.String())
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66711093EncodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret(out *jwriter.Writer, in MetaData) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			out.String(string(v2Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MetaData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66711093EncodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66711093EncodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66711093DecodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66711093DecodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret(l, v)
}
func easyjson66711093DecodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret1(in *jlexer.Lexer, out *Meta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "secret_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.SecretID).UnmarshalText(data))
			}
		case "meta":
			(out.Data).UnmarshalEasyJSON(in)
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66711093EncodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret1(out *jwriter.Writer, in Meta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"secret_id\":"
		out.RawString(prefix)
		out.RawText((in.SecretID).MarshalText())
	}
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Meta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66711093EncodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Meta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66711093EncodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Meta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66711093DecodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Meta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66711093DecodeGithubComPatradenYaPracticumGophkeeperPkgDomainSecret1(l, v)
}
