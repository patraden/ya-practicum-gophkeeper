// Code generated by MockGen. DO NOT EDIT.
// Source: server/internal/identity/identity.go
//
// Generated by this command:
//
//	mockgen -source=server/internal/identity/identity.go -destination=server/internal/mock/identity.go -package=mock -mock_names Manager=MockIdentityManager Manager
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	user "github.com/patraden/ya-practicum-gophkeeper/pkg/domain/user"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentityManager is a mock of Manager interface.
type MockIdentityManager struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagerMockRecorder
	isgomock struct{}
}

// MockIdentityManagerMockRecorder is the mock recorder for MockIdentityManager.
type MockIdentityManagerMockRecorder struct {
	mock *MockIdentityManager
}

// NewMockIdentityManager creates a new mock instance.
func NewMockIdentityManager(ctrl *gomock.Controller) *MockIdentityManager {
	mock := &MockIdentityManager{ctrl: ctrl}
	mock.recorder = &MockIdentityManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityManager) EXPECT() *MockIdentityManagerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIdentityManager) CreateUser(ctx context.Context, usr *user.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, usr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIdentityManagerMockRecorder) CreateUser(ctx, usr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIdentityManager)(nil).CreateUser), ctx, usr)
}

// DeleteUser mocks base method.
func (m *MockIdentityManager) DeleteUser(ctx context.Context, usr *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, usr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIdentityManagerMockRecorder) DeleteUser(ctx, usr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIdentityManager)(nil).DeleteUser), ctx, usr)
}

// GetToken mocks base method.
func (m *MockIdentityManager) GetToken(ctx context.Context, usr *user.User) (*user.IdentityToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, usr)
	ret0, _ := ret[0].(*user.IdentityToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockIdentityManagerMockRecorder) GetToken(ctx, usr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockIdentityManager)(nil).GetToken), ctx, usr)
}

// RefreshToken mocks base method.
func (m *MockIdentityManager) RefreshToken(ctx context.Context, token *user.IdentityToken) (*user.IdentityToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, token)
	ret0, _ := ret[0].(*user.IdentityToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockIdentityManagerMockRecorder) RefreshToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockIdentityManager)(nil).RefreshToken), ctx, token)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(ctx context.Context, arg1 *user.User, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg1, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(ctx, arg1, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), ctx, arg1, token)
}

// DeleteUser mocks base method.
func (m *MockClient) DeleteUser(ctx context.Context, userID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientMockRecorder) DeleteUser(ctx, userID, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), ctx, userID, token)
}

// Login mocks base method.
func (m *MockClient) Login(ctx context.Context, arg1 *user.User) (*user.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, arg1)
	ret0, _ := ret[0].(*user.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockClientMockRecorder) Login(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClient)(nil).Login), ctx, arg1)
}

// LoginClient mocks base method.
func (m *MockClient) LoginClient(ctx context.Context, scopes ...string) (*user.JWT, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginClient", varargs...)
	ret0, _ := ret[0].(*user.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClient indicates an expected call of LoginClient.
func (mr *MockClientMockRecorder) LoginClient(ctx any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClient", reflect.TypeOf((*MockClient)(nil).LoginClient), varargs...)
}

// RefreshToken mocks base method.
func (m *MockClient) RefreshToken(ctx context.Context, refreshToken string) (*user.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*user.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockClientMockRecorder) RefreshToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockClient)(nil).RefreshToken), ctx, refreshToken)
}
