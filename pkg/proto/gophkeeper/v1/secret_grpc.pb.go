// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gophkeeper/v1/secret.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretService_SecretUpdateInit_FullMethodName   = "/gophkeeper.v1.SecretService/SecretUpdateInit"
	SecretService_SecretUpdateCommit_FullMethodName = "/gophkeeper.v1.SecretService/SecretUpdateCommit"
)

// SecretServiceClient is the client API for SecretService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretServiceClient interface {
	SecretUpdateInit(ctx context.Context, in *SecretUpdateInitRequest, opts ...grpc.CallOption) (*SecretUpdateInitResponse, error)
	SecretUpdateCommit(ctx context.Context, in *SecretUpdateCommitRequest, opts ...grpc.CallOption) (*SecretUpdateCommitResponse, error)
}

type secretServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretServiceClient(cc grpc.ClientConnInterface) SecretServiceClient {
	return &secretServiceClient{cc}
}

func (c *secretServiceClient) SecretUpdateInit(ctx context.Context, in *SecretUpdateInitRequest, opts ...grpc.CallOption) (*SecretUpdateInitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretUpdateInitResponse)
	err := c.cc.Invoke(ctx, SecretService_SecretUpdateInit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretServiceClient) SecretUpdateCommit(ctx context.Context, in *SecretUpdateCommitRequest, opts ...grpc.CallOption) (*SecretUpdateCommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretUpdateCommitResponse)
	err := c.cc.Invoke(ctx, SecretService_SecretUpdateCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretServiceServer is the server API for SecretService service.
// All implementations must embed UnimplementedSecretServiceServer
// for forward compatibility.
type SecretServiceServer interface {
	SecretUpdateInit(context.Context, *SecretUpdateInitRequest) (*SecretUpdateInitResponse, error)
	SecretUpdateCommit(context.Context, *SecretUpdateCommitRequest) (*SecretUpdateCommitResponse, error)
	mustEmbedUnimplementedSecretServiceServer()
}

// UnimplementedSecretServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretServiceServer struct{}

func (UnimplementedSecretServiceServer) SecretUpdateInit(context.Context, *SecretUpdateInitRequest) (*SecretUpdateInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretUpdateInit not implemented")
}
func (UnimplementedSecretServiceServer) SecretUpdateCommit(context.Context, *SecretUpdateCommitRequest) (*SecretUpdateCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretUpdateCommit not implemented")
}
func (UnimplementedSecretServiceServer) mustEmbedUnimplementedSecretServiceServer() {}
func (UnimplementedSecretServiceServer) testEmbeddedByValue()                       {}

// UnsafeSecretServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretServiceServer will
// result in compilation errors.
type UnsafeSecretServiceServer interface {
	mustEmbedUnimplementedSecretServiceServer()
}

func RegisterSecretServiceServer(s grpc.ServiceRegistrar, srv SecretServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretService_ServiceDesc, srv)
}

func _SecretService_SecretUpdateInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretUpdateInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).SecretUpdateInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_SecretUpdateInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).SecretUpdateInit(ctx, req.(*SecretUpdateInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretService_SecretUpdateCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretUpdateCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).SecretUpdateCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_SecretUpdateCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).SecretUpdateCommit(ctx, req.(*SecretUpdateCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretService_ServiceDesc is the grpc.ServiceDesc for SecretService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.v1.SecretService",
	HandlerType: (*SecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SecretUpdateInit",
			Handler:    _SecretService_SecretUpdateInit_Handler,
		},
		{
			MethodName: "SecretUpdateCommit",
			Handler:    _SecretService_SecretUpdateCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gophkeeper/v1/secret.proto",
}
