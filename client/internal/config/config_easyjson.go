// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	json "encoding/json"
	time "time"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComPatradenYaPracticumGophkeeperClientInternalConfig(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "install_dir":
			out.InstallDir = string(in.String())
		case "server_host":
			out.ServerHost = string(in.String())
		case "server_port":
			out.ServerPort = int(in.Int())
		case "server_tls_cert_path":
			out.ServerTLSCertPath = string(in.String())
		case "database_dsn":
			out.DatabaseFileName = string(in.String())
		case "debug":
			out.DebugMode = bool(in.Bool())
		case "RequestsTimeout":
			out.RequestsTimeout = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComPatradenYaPracticumGophkeeperClientInternalConfig(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"install_dir\":"
		out.RawString(prefix[1:])
		out.String(string(in.InstallDir))
	}
	{
		const prefix string = ",\"server_host\":"
		out.RawString(prefix)
		out.String(string(in.ServerHost))
	}
	{
		const prefix string = ",\"server_port\":"
		out.RawString(prefix)
		out.Int(int(in.ServerPort))
	}
	{
		const prefix string = ",\"server_tls_cert_path\":"
		out.RawString(prefix)
		out.String(string(in.ServerTLSCertPath))
	}
	{
		const prefix string = ",\"database_dsn\":"
		out.RawString(prefix)
		out.String(string(in.DatabaseFileName))
	}
	{
		const prefix string = ",\"debug\":"
		out.RawString(prefix)
		out.Bool(bool(in.DebugMode))
	}
	{
		const prefix string = ",\"RequestsTimeout\":"
		out.RawString(prefix)
		out.Int64(int64(in.RequestsTimeout))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComPatradenYaPracticumGophkeeperClientInternalConfig(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComPatradenYaPracticumGophkeeperClientInternalConfig(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComPatradenYaPracticumGophkeeperClientInternalConfig(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComPatradenYaPracticumGophkeeperClientInternalConfig(l, v)
}
