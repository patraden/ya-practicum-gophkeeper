// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gophkeeper/v1/secret.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SecretUpdateInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretUpdateInitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretUpdateInitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretUpdateInitRequestMultiError, or nil if none found.
func (m *SecretUpdateInitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretUpdateInitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SecretId

	// no validation rules for SecretName

	// no validation rules for VersionId

	// no validation rules for ParentVersionId

	// no validation rules for ClientInfo

	// no validation rules for Size

	// no validation rules for Hash

	// no validation rules for EncryptedDek

	// no validation rules for MetadataJson

	if len(errors) > 0 {
		return SecretUpdateInitRequestMultiError(errors)
	}

	return nil
}

// SecretUpdateInitRequestMultiError is an error wrapping multiple validation
// errors returned by SecretUpdateInitRequest.ValidateAll() if the designated
// constraints aren't met.
type SecretUpdateInitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretUpdateInitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretUpdateInitRequestMultiError) AllErrors() []error { return m }

// SecretUpdateInitRequestValidationError is the validation error returned by
// SecretUpdateInitRequest.Validate if the designated constraints aren't met.
type SecretUpdateInitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretUpdateInitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretUpdateInitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretUpdateInitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretUpdateInitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretUpdateInitRequestValidationError) ErrorName() string {
	return "SecretUpdateInitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SecretUpdateInitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretUpdateInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretUpdateInitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretUpdateInitRequestValidationError{}

// Validate checks the field values on SecretUpdateInitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretUpdateInitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretUpdateInitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretUpdateInitResponseMultiError, or nil if none found.
func (m *SecretUpdateInitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretUpdateInitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SecretId

	// no validation rules for VersionId

	// no validation rules for ParentVersionId

	// no validation rules for S3Url

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretUpdateInitResponseValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretUpdateInitResponseValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretUpdateInitResponseValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SecretUpdateInitResponseMultiError(errors)
	}

	return nil
}

// SecretUpdateInitResponseMultiError is an error wrapping multiple validation
// errors returned by SecretUpdateInitResponse.ValidateAll() if the designated
// constraints aren't met.
type SecretUpdateInitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretUpdateInitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretUpdateInitResponseMultiError) AllErrors() []error { return m }

// SecretUpdateInitResponseValidationError is the validation error returned by
// SecretUpdateInitResponse.Validate if the designated constraints aren't met.
type SecretUpdateInitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretUpdateInitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretUpdateInitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretUpdateInitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretUpdateInitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretUpdateInitResponseValidationError) ErrorName() string {
	return "SecretUpdateInitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretUpdateInitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretUpdateInitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretUpdateInitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretUpdateInitResponseValidationError{}

// Validate checks the field values on SecretUpdateCommitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretUpdateCommitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretUpdateCommitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretUpdateCommitRequestMultiError, or nil if none found.
func (m *SecretUpdateCommitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretUpdateCommitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SecretId

	// no validation rules for VersionId

	// no validation rules for ParentVersionId

	// no validation rules for ClientInfo

	// no validation rules for Size

	// no validation rules for Hash

	// no validation rules for EncryptedDek

	// no validation rules for Token

	if len(errors) > 0 {
		return SecretUpdateCommitRequestMultiError(errors)
	}

	return nil
}

// SecretUpdateCommitRequestMultiError is an error wrapping multiple validation
// errors returned by SecretUpdateCommitRequest.ValidateAll() if the
// designated constraints aren't met.
type SecretUpdateCommitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretUpdateCommitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretUpdateCommitRequestMultiError) AllErrors() []error { return m }

// SecretUpdateCommitRequestValidationError is the validation error returned by
// SecretUpdateCommitRequest.Validate if the designated constraints aren't met.
type SecretUpdateCommitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretUpdateCommitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretUpdateCommitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretUpdateCommitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretUpdateCommitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretUpdateCommitRequestValidationError) ErrorName() string {
	return "SecretUpdateCommitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SecretUpdateCommitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretUpdateCommitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretUpdateCommitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretUpdateCommitRequestValidationError{}

// Validate checks the field values on SecretUpdateCommitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SecretUpdateCommitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretUpdateCommitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretUpdateCommitResponseMultiError, or nil if none found.
func (m *SecretUpdateCommitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretUpdateCommitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SecretId

	// no validation rules for SecretName

	// no validation rules for VersionId

	if len(errors) > 0 {
		return SecretUpdateCommitResponseMultiError(errors)
	}

	return nil
}

// SecretUpdateCommitResponseMultiError is an error wrapping multiple
// validation errors returned by SecretUpdateCommitResponse.ValidateAll() if
// the designated constraints aren't met.
type SecretUpdateCommitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretUpdateCommitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretUpdateCommitResponseMultiError) AllErrors() []error { return m }

// SecretUpdateCommitResponseValidationError is the validation error returned
// by SecretUpdateCommitResponse.Validate if the designated constraints aren't met.
type SecretUpdateCommitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretUpdateCommitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretUpdateCommitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretUpdateCommitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretUpdateCommitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretUpdateCommitResponseValidationError) ErrorName() string {
	return "SecretUpdateCommitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SecretUpdateCommitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretUpdateCommitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretUpdateCommitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretUpdateCommitResponseValidationError{}
