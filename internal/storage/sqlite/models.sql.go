// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: models.sql

package sqlite

import (
	"context"
	"database/sql"
	"time"
)

const countUser = `-- name: CountUser :one
SELECT count(*) FROM user
`

func (q *Queries) CountUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user (id, username, verifier, role, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, username, verifier, role, created_at, updated_at
`

type CreateUserParams struct {
	ID        string
	Username  string
	Verifier  []byte
	Role      string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Verifier,
		arg.Role,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Verifier,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
