// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gophkeeper/v1/secret.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateInitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateInitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInitRequestMultiError, or nil if none found.
func (m *UpdateInitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SecretId

	// no validation rules for ParentVersion

	// no validation rules for Version

	// no validation rules for SecretName

	// no validation rules for Size

	// no validation rules for Hash

	// no validation rules for EncryptedDek

	// no validation rules for ClientInfo

	// no validation rules for ExpiresInSeconds

	// no validation rules for MetaJson

	// no validation rules for RequestType

	if len(errors) > 0 {
		return UpdateInitRequestMultiError(errors)
	}

	return nil
}

// UpdateInitRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateInitRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateInitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInitRequestMultiError) AllErrors() []error { return m }

// UpdateInitRequestValidationError is the validation error returned by
// UpdateInitRequest.Validate if the designated constraints aren't met.
type UpdateInitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInitRequestValidationError) ErrorName() string {
	return "UpdateInitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInitRequestValidationError{}

// Validate checks the field values on UpdateInitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInitResponseMultiError, or nil if none found.
func (m *UpdateInitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SecretId

	// no validation rules for Version

	// no validation rules for S3Url

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateInitResponseValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateInitResponseValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateInitResponseValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateInitResponseMultiError(errors)
	}

	return nil
}

// UpdateInitResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateInitResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateInitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInitResponseMultiError) AllErrors() []error { return m }

// UpdateInitResponseValidationError is the validation error returned by
// UpdateInitResponse.Validate if the designated constraints aren't met.
type UpdateInitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInitResponseValidationError) ErrorName() string {
	return "UpdateInitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInitResponseValidationError{}

// Validate checks the field values on UpdateCommitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommitRequestMultiError, or nil if none found.
func (m *UpdateCommitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCommitRequestMultiError(errors)
	}

	return nil
}

// UpdateCommitRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCommitRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommitRequestMultiError) AllErrors() []error { return m }

// UpdateCommitRequestValidationError is the validation error returned by
// UpdateCommitRequest.Validate if the designated constraints aren't met.
type UpdateCommitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommitRequestValidationError) ErrorName() string {
	return "UpdateCommitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommitRequestValidationError{}

// Validate checks the field values on UpdateCommitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommitResponseMultiError, or nil if none found.
func (m *UpdateCommitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCommitResponseMultiError(errors)
	}

	return nil
}

// UpdateCommitResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCommitResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommitResponseMultiError) AllErrors() []error { return m }

// UpdateCommitResponseValidationError is the validation error returned by
// UpdateCommitResponse.Validate if the designated constraints aren't met.
type UpdateCommitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommitResponseValidationError) ErrorName() string {
	return "UpdateCommitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommitResponseValidationError{}
