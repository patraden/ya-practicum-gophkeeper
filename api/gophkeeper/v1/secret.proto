syntax = "proto3";

package gophkeeper.v1;

import "buf/validate/validate.proto";
import "gophkeeper/v1/common.proto";

option go_package = "github.com/patraden/ya-practicum-gophkeeper/api/gophkeeper/v1;proto";

service SecretService {
  rpc SecretUpdateInit(SecretUpdateInitRequest) returns (SecretUpdateInitResponse);
  rpc SecretUpdateCommit(SecretUpdateCommitRequest) returns (SecretUpdateCommitResponse);
}

message SecretUpdateInitRequest {
  string user_id           = 1 [(buf.validate.field).string.uuid = true];             // Required: ID of the user performing the operation
  string secret_id         = 2 [(buf.validate.field).string.uuid = true];             // Required: Target secret UUID (client-generated)
  string secret_name       = 3 [(buf.validate.field).string = {min_len: 1, max_len: 64}]; // Required: Secret name (for new secrets only)
  string version_id        = 4 [(buf.validate.field).string.uuid = true];             // Required: New version UUID (client-generated)
  string parent_version_id = 5;                                                       // Optional: Expected current version; empty for new secret
  string client_info       = 6 [(buf.validate.field).string.min_len = 1];             // Required: Info about client/device (agent, version, etc.)
  int64  size              = 7 [(buf.validate.field).int64.gt = 0];                   // Required: Size of encrypted content
  bytes  hash              = 8 [(buf.validate.field).bytes.min_len = 1];              // Required: Hash of encrypted content
  bytes  encrypted_dek     = 9 [(buf.validate.field).bytes.min_len = 1];              // Required: Encrypted Data Encryption Key (DEK)
  string metadata_json     = 10;                                                      // Optional: JSON string with user-defined metadata
}

message SecretUpdateInitResponse {
  string user_id           = 1 [(buf.validate.field).string.uuid = true];             // Echoed back user ID
  string secret_id         = 2 [(buf.validate.field).string.uuid = true];             // Secret ID for which the request was created
  string version_id        = 3 [(buf.validate.field).string.uuid = true];             // Version UUID being uploaded
  string parent_version_id = 4;                                                       // Optional: Expected current version; empty for new secret
  string s3_url            = 5 [(buf.validate.field).string.uri = true];              // Presigned URL or base bucket path for upload
  int64  token             = 6 [(buf.validate.field).int64.gt = 0];                   // Token to be used in UpdateCommit for validation
  TemporaryCredentials credentials = 7;                                               // STS credentials to be used with S3
}

message SecretUpdateCommitRequest {
  string user_id           = 1 [(buf.validate.field).string.uuid = true];             // Required: ID of the user performing the operation
  string secret_id         = 2 [(buf.validate.field).string.uuid = true];             // Required: Target secret UUID (client-generated)
  string version_id        = 3 [(buf.validate.field).string.uuid = true];             // Required: New version UUID (client-generated)
  string parent_version_id = 4;                                                       // Optional: Expected current version; empty for new secret
  string client_info       = 5 [(buf.validate.field).string.min_len = 1];             // Required: Info about client/device (agent, version, etc.)
  int64  size              = 6 [(buf.validate.field).int64.gt = 0];                   // Required: Size of encrypted content
  bytes  hash              = 7 [(buf.validate.field).bytes.min_len = 1];              // Required: Hash of encrypted content
  bytes  encrypted_dek     = 8 [(buf.validate.field).bytes.min_len = 1];              // Required: Encrypted Data Encryption Key (DEK)
  int64  token             = 9 [(buf.validate.field).int64.gt = 0];                   // Required: Token from UpdateInit for validation
}

message SecretUpdateCommitResponse {
  string user_id     = 1 [(buf.validate.field).string.uuid = true];                   // Required: ID of the user performing the operation
  string secret_id   = 2 [(buf.validate.field).string.uuid = true];                   // Required: Target secret UUID (client-generated)
  string secret_name = 3 [(buf.validate.field).string = {min_len: 1, max_len: 64}];   // Required: Secret name (for new secrets only)
  string version_id  = 4 [(buf.validate.field).string.uuid = true];                   // Required: New version UUID (client-generated)
}