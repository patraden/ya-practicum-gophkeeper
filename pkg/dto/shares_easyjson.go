// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson92dbcc88DecodeGithubComPatradenYaPracticumGophkeeperPkgDto(in *jlexer.Lexer, out *ShamirShares) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "shares":
			if in.IsNull() {
				in.Skip()
				out.Shares = nil
			} else {
				in.Delim('[')
				if out.Shares == nil {
					if !in.IsDelim(']') {
						out.Shares = make([][]uint8, 0, 2)
					} else {
						out.Shares = [][]uint8{}
					}
				} else {
					out.Shares = (out.Shares)[:0]
				}
				for !in.IsDelim(']') {
					var v1 []uint8
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						v1 = in.Bytes()
					}
					out.Shares = append(out.Shares, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson92dbcc88EncodeGithubComPatradenYaPracticumGophkeeperPkgDto(out *jwriter.Writer, in ShamirShares) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"shares\":"
		out.RawString(prefix[1:])
		if in.Shares == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Shares {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Base64Bytes(v4)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShamirShares) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson92dbcc88EncodeGithubComPatradenYaPracticumGophkeeperPkgDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShamirShares) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson92dbcc88EncodeGithubComPatradenYaPracticumGophkeeperPkgDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShamirShares) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson92dbcc88DecodeGithubComPatradenYaPracticumGophkeeperPkgDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShamirShares) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson92dbcc88DecodeGithubComPatradenYaPracticumGophkeeperPkgDto(l, v)
}
