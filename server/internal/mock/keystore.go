// Code generated by MockGen. DO NOT EDIT.
// Source: server/internal/crypto/keystore/keystore.go
//
// Generated by this command:
//
//	mockgen -source=server/internal/crypto/keystore/keystore.go -destination=server/internal/mock/keystore.go -package=mock Keystore
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKeystore is a mock of Keystore interface.
type MockKeystore struct {
	ctrl     *gomock.Controller
	recorder *MockKeystoreMockRecorder
	isgomock struct{}
}

// MockKeystoreMockRecorder is the mock recorder for MockKeystore.
type MockKeystoreMockRecorder struct {
	mock *MockKeystore
}

// NewMockKeystore creates a new mock instance.
func NewMockKeystore(ctrl *gomock.Controller) *MockKeystore {
	mock := &MockKeystore{ctrl: ctrl}
	mock.recorder = &MockKeystoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeystore) EXPECT() *MockKeystoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeystore) Get() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeystoreMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeystore)(nil).Get))
}

// IsLoaded mocks base method.
func (m *MockKeystore) IsLoaded() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoaded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLoaded indicates an expected call of IsLoaded.
func (mr *MockKeystoreMockRecorder) IsLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoaded", reflect.TypeOf((*MockKeystore)(nil).IsLoaded))
}

// Load mocks base method.
func (m *MockKeystore) Load(secret []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockKeystoreMockRecorder) Load(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockKeystore)(nil).Load), secret)
}

// Wipe mocks base method.
func (m *MockKeystore) Wipe() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wipe")
}

// Wipe indicates an expected call of Wipe.
func (mr *MockKeystoreMockRecorder) Wipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wipe", reflect.TypeOf((*MockKeystore)(nil).Wipe))
}
